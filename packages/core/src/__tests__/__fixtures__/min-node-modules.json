{
  "node_modules": {
    ".yarn-integrity": "{\n  \"systemParams\": \"darwin-x64-93\",\n  \"modulesFolders\": [\n    \"node_modules\"\n  ],\n  \"flags\": [],\n  \"linkedModules\": [\n    \"@checkup/cli\",\n    \"@checkup/plugin-ember\",\n    \"@checkup/plugin-ember-octane\",\n    \"@linkedin/ember-session-record\",\n    \"checkup\",\n    \"docusaurus-plugin-search-local\",\n    \"site-audit\"\n  ],\n  \"topLevelPatterns\": [\n    \"left-pad@^1.3.0\"\n  ],\n  \"lockfileEntries\": {\n    \"left-pad@^1.3.0\": \"https://registry.yarnpkg.com/left-pad/-/left-pad-1.3.0.tgz#5b8a3a7765dfe001261dde915589e782f8c94d1e\"\n  },\n  \"files\": [],\n  \"artifacts\": {}\n}",
    "left-pad": {
      ".travis.yml": "language: node_js\nnode_js:\n - \"6\"\n - \"5\"\n - \"4\"\n - \"0.12\"\n",
      "COPYING": "            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\r\n                    Version 2, December 2004\r\n\r\n Copyright (C) 2014 Azer Ko√ßulu <azer@roadbeats.com>\r\n\r\n Everyone is permitted to copy and distribute verbatim or modified\r\n copies of this license document, and changing it is allowed as long\r\n as the name is changed.\r\n\r\n            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\r\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\r\n\r\n  0. You just DO WHAT THE FUCK YOU WANT TO.\r\n\r\n",
      "README.md": "## left-pad\n\nString left pad\n\n[![Build Status][travis-image]][travis-url]\n\n## Install\n\n```bash\n$ npm install left-pad\n```\n\n## Usage\n\n```js\nconst leftPad = require('left-pad')\n\nleftPad('foo', 5)\n// => \"  foo\"\n\nleftPad('foobar', 6)\n// => \"foobar\"\n\nleftPad(1, 2, '0')\n// => \"01\"\n\nleftPad(17, 5, 0)\n// => \"00017\"\n```\n\n**NOTE:** The third argument should be a single `char`. However the module doesn't throw an error if you supply more than one `char`s. See [#28](https://github.com/stevemao/left-pad/pull/28).\n\n**NOTE:** Characters having code points outside of [BMP plan](https://en.wikipedia.org/wiki/Plane_(Unicode)#Basic_Multilingual_Plane) are considered a two distinct characters. See [#58](https://github.com/stevemao/left-pad/issues/58).\n\n[travis-image]: https://travis-ci.org/stevemao/left-pad.svg?branch=master\n[travis-url]: https://travis-ci.org/stevemao/left-pad\n",
      "index.d.ts": "// Type definitions for left-pad 1.2.0\n// Project: https://github.com/stevemao/left-pad\n// Definitions by: Zlatko Andonovski, Andrew Yang, Chandler Fang and Zac Xu\n\ndeclare function leftPad(str: string|number, len: number, ch?: string|number): string;\n\ndeclare namespace leftPad { }\n\nexport = leftPad;\n",
      "index.js": "/* This program is free software. It comes without any warranty, to\n     * the extent permitted by applicable law. You can redistribute it\n     * and/or modify it under the terms of the Do What The Fuck You Want\n     * To Public License, Version 2, as published by Sam Hocevar. See\n     * http://www.wtfpl.net/ for more details. */\n'use strict';\nmodule.exports = leftPad;\n\nvar cache = [\n  '',\n  ' ',\n  '  ',\n  '   ',\n  '    ',\n  '     ',\n  '      ',\n  '       ',\n  '        ',\n  '         '\n];\n\nfunction leftPad (str, len, ch) {\n  // convert `str` to a `string`\n  str = str + '';\n  // `len` is the `pad`'s length now\n  len = len - str.length;\n  // doesn't need to pad\n  if (len <= 0) return str;\n  // `ch` defaults to `' '`\n  if (!ch && ch !== 0) ch = ' ';\n  // convert `ch` to a `string` cuz it could be a number\n  ch = ch + '';\n  // cache common use cases\n  if (ch === ' ' && len < 10) return cache[len] + str;\n  // `pad` starts with an empty string\n  var pad = '';\n  // loop\n  while (true) {\n    // add `ch` to `pad` if `len` is odd\n    if (len & 1) pad += ch;\n    // divide `len` by 2, ditch the remainder\n    len >>= 1;\n    // \"double\" the `ch` so this operation count grows logarithmically on `len`\n    // each time `ch` is \"doubled\", the `len` would need to be \"doubled\" too\n    // similar to finding a value in binary search tree, hence O(log(n))\n    if (len) ch += ch;\n    // `len` is 0, exit the loop\n    else break;\n  }\n  // pad `str`!\n  return pad + str;\n}\n",
      "package.json": "{\n  \"name\": \"left-pad\",\n  \"version\": \"1.3.0\",\n  \"description\": \"String left pad\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"scripts\": {\n    \"test\": \"node test\",\n    \"bench\": \"node perf/perf.js\"\n  },\n  \"devDependencies\": {\n    \"benchmark\": \"^2.1.0\",\n    \"fast-check\": \"0.0.8\",\n    \"tape\": \"*\"\n  },\n  \"keywords\": [\n    \"leftpad\",\n    \"left\",\n    \"pad\",\n    \"padding\",\n    \"string\",\n    \"repeat\"\n  ],\n  \"repository\": {\n    \"url\": \"git@github.com:stevemao/left-pad.git\",\n    \"type\": \"git\"\n  },\n  \"author\": \"azer\",\n  \"maintainers\": [\n    {\n      \"name\": \"Cameron Westland\",\n      \"email\": \"camwest@gmail.com\"\n    }\n  ],\n  \"license\": \"WTFPL\"\n}\n",
      "perf": {
        "O(n).js": "'use strict';\n\nmodule.exports = function (str, len, ch) {\n  str = str + '';\n\n  len = len - str.length;\n  if (len <= 0) return str;\n\n  if (!ch && ch !== 0) ch = ' ';\n  ch = ch + '';\n\n  while (len--) {\n    str = ch + str;\n  }\n\n  return str;\n}\n",
        "es6Repeat.js": "'use strict';\n\nmodule.exports = function (str, len, ch) {\n  str = str + '';\n\n  len = len - str.length;\n  if (len <= 0) return str;\n\n  if (!ch && ch !== 0) ch = ' ';\n  ch = ch + '';\n\n  return ch.repeat(len) + str;\n};\n",
        "perf.js": "'use strict';\nvar oN = require('./O(n)');\nvar es6Repeat = require('./es6Repeat');\nvar current = require('../');\n\nvar Benchmark = require('benchmark');\n\nvar str = \"abcd\"\nvar len = 100;\n\nfunction buildSuite (note, fns, args) {\n  console.log(note);\n  var suite = new Benchmark.Suite;\n\n  Object.keys(fns).forEach(function (name) {\n    suite.add(name, function () {\n      fns[name].apply(null, args);\n    });\n  });\n  suite.on('cycle', function (event) {\n    console.log(String(event.target));\n  }).on('complete', function () {\n    console.log('Fastest is ' + this.filter('fastest').map('name'));\n  });\n\n  return suite;\n}\n\nvar fns = {\n  'O(n)': oN,\n  'ES6 Repeat': es6Repeat,\n  'Current': current\n};\n\nbuildSuite('-> pad 100 spaces to str of len 4', fns, ['abcd', 104, ' ']).run();\nbuildSuite('-> pad 10 spaces to str of len 4', fns, ['abcd', 14,  ' ']).run();\nbuildSuite('-> pad 9 spaces to str of len 4', fns, ['abcd', 13,  ' ']).run();\nbuildSuite('-> pad 100 to str of len 100', fns, ['0012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789', 200, ' ']).run();\nbuildSuite('-> pad 10 to str of len 100', fns, ['0012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789', 110, ' ']).run();\nbuildSuite('-> pad 9 to str of len 100', fns, ['0012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789', 109, ' ']).run();\n"
      },
      "test.js": "/* This program is free software. It comes without any warranty, to\n     * the extent permitted by applicable law. You can redistribute it\n     * and/or modify it under the terms of the Do What The Fuck You Want\n     * To Public License, Version 2, as published by Sam Hocevar. See\n     * http://www.wtfpl.net/ for more details. */\nvar leftPad = require(\"./\");\nvar test = require(\"tape\");\nvar fc = require(\"fast-check\");\n\ntest('edge cases', function (assert) {\n  assert.plan(12);\n  assert.strictEqual(leftPad('foobar', 6), 'foobar');\n  assert.strictEqual(leftPad('foobar', 5), 'foobar');\n  assert.strictEqual(leftPad('foobar', -1), 'foobar');\n  assert.strictEqual(leftPad('foobar', 6, '1'), 'foobar');\n  assert.strictEqual(leftPad('foobar', 5, '1'), 'foobar');\n  assert.strictEqual(leftPad('foobar', -1, '1'), 'foobar');\n  assert.strictEqual(leftPad('foobar', 8, ''), '  foobar');\n  assert.strictEqual(leftPad('foobar', 8, false), '  foobar', 'false default to space');\n  assert.strictEqual(leftPad('foobar', 8, 0), '00foobar', '0 is treated as 0');\n  assert.strictEqual(leftPad(0, 3, 1), '110', 'integer for str is converted to string');\n  assert.strictEqual(leftPad(true, 7), '   true', 'boolean for str is converted to string');\n  assert.strictEqual(leftPad('', 2), '  ', 'empty str for str');\n});\n\ntest('spaces for ch', function (assert) {\n  assert.plan(12);\n  // default to space if not specified\n  assert.strictEqual(leftPad('foo', 2), 'foo');\n  assert.strictEqual(leftPad('foo', 3), 'foo');\n  assert.strictEqual(leftPad('foo', 4), ' foo');\n  assert.strictEqual(leftPad('foo', 5), '  foo');\n  assert.strictEqual(leftPad('foo', 12), '         foo');\n  assert.strictEqual(leftPad('foo', 13), '          foo');\n  // explicit space param\n  assert.strictEqual(leftPad('foo', 2, ' '), 'foo');\n  assert.strictEqual(leftPad('foo', 3, ' '), 'foo');\n  assert.strictEqual(leftPad('foo', 4, ' '), ' foo');\n  assert.strictEqual(leftPad('foo', 5, ' '), '  foo');\n  assert.strictEqual(leftPad('foo', 12, ' '), '         foo');\n  assert.strictEqual(leftPad('foo', 13, ' '), '          foo');\n});\n\ntest('non spaces for ch', function (assert) {\n  assert.plan(7);\n  assert.strictEqual(leftPad(1, 2, 0), '01');\n  assert.strictEqual(leftPad(1, 2, '-'), '-1');\n  assert.strictEqual(leftPad('foo', 4, '*'), '*foo', '0b1 len');\n  assert.strictEqual(leftPad('foo', 5, '*'), '**foo', '0b10 len');\n  assert.strictEqual(leftPad('foo', 6, '*'), '***foo', '0b11 len');\n  assert.strictEqual(leftPad('foo', 7, '*'), '****foo', '0b001 len');\n  assert.strictEqual(leftPad('foo', 103, '*'), '****************************************************************************************************foo', '100 pad');\n});\n\nvar runProperty = function(assert, name, checkFn) {\n  var prop = fc.property(fc.string(), fc.nat(1000), fc.char(), checkFn);\n  var result = fc.check(prop);\n  var message = '';\n  if (result.failed) {\n    message = 'Property \"' + name + '\" failed on counterexample ' + JSON.stringify(result.counterexample) + ' (seed: ' + result.seed + ')';\n  }\n  assert.strictEqual(message, '', name);\n};\n\ntest('properties', function (assert) {\n  assert.plan(4);\n  runProperty(assert, 'starts by ch', function(str, len, ch) {\n      var beg = leftPad(str, len, ch).substr(0, len -str.length);\n      for (var idx = 0 ; idx != beg.length ; ++idx)\n        if (beg[idx] !== ch)\n          return false;\n      return true;\n  });\n  runProperty(assert, 'ends by str', function(str, len, ch) {\n      var out = leftPad(str, len, ch);\n      for (var idx = 0 ; idx != str.length ; ++idx)\n        if (str[str.length -idx -1] !== out[out.length -idx -1])\n          return false;\n      return true;\n  });\n  runProperty(assert, 'len char long if padded (unchanged otherwise)', function(str, len, ch) {\n      var out = leftPad(str, len, ch);\n      return str.length < len ? out.length === len : str === out;\n  });\n  runProperty(assert, 'no ch equivalent to space', function(str, len) {\n      return leftPad(str, len) === leftPad(str, len, ' ');\n  });\n});\n"
    }
  },
  "package.json": "{\n  \"name\": \"min-node-modules\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"left-pad\": \"^1.3.0\"\n  }\n}\n",
  "yarn.lock": "# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n# yarn lockfile v1\n\n\nleft-pad@^1.3.0:\n  version \"1.3.0\"\n  resolved \"https://registry.yarnpkg.com/left-pad/-/left-pad-1.3.0.tgz#5b8a3a7765dfe001261dde915589e782f8c94d1e\"\n  integrity sha512-XI5MPzVNApjAyhQzphX8BkmKsKUxD4LdyK24iZeQGinBN9yTQT3bFlCBy/aVx2HrNcqQGsdot8ghrjyrvMCoEA==\n"
}
